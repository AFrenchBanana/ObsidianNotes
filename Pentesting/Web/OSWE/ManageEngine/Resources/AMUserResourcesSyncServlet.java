package com.adventnet.appmanager.servlets.comm;

import com.adventnet.appmanager.db.AMConnectionPool;
import com.adventnet.appmanager.logging.AMLog;
import com.adventnet.appmanager.util.Constants;
import com.adventnet.appmanager.util.EnterpriseUtil;
import com.adventnet.appmanager.util.RestrictedUsersViewUtil;
import com.manageengine.appmanager.util.DelegatedUserRoleUtil;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


public class AMUserResourcesSyncServlet
  extends HttpServlet
{
  public void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException
  {
    doGet(request, response);
  }
  
  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
  {
    response.setContentType("text/html; charset=UTF-8");
    PrintWriter out = response.getWriter();
    String isSyncConfigtoUserMap = request.getParameter("isSyncConfigtoUserMap");
    if ((isSyncConfigtoUserMap != null) && ("true".equals(isSyncConfigtoUserMap)))
    {
      fetchAllConfigToUserMappingForMAS(out);
      return;
    }
    String masRange = request.getParameter("ForMasRange");
    String userId = request.getParameter("userId"); // get paramter userID
    String chkRestrictedRole = request.getParameter("chkRestrictedRole"); 
    AMLog.debug("[AMUserResourcesSyncServlet::(doGet)] masRange : " + masRange + ", userId : " + userId + " , chkRestrictedRole : " + chkRestrictedRole); // no verification on the userID
    
    if ((chkRestrictedRole != null) && ("true".equals(chkRestrictedRole))) // will need to bypass this if statement 
    {
      boolean isRestricted = RestrictedUsersViewUtil.isRestrictedRole(userId);
      out.println(isRestricted);


    }
    // to get into here 
    else if (masRange != null) { 
      if ((userId != null) && (!"".equals(userId)))
      {
        // this if statement is where the function below gets executed 
        fetchUserResourcesofMASForUserId(userId, masRange, out);
      }
      else
      {
        fetchAllUserResourcesForMAS(masRange, out);
      }
    }
    else {  
      AMLog.debug("[AMUserResourcesSyncServlet::(doGet)] Improper mas range is given");
    }
  }
  

 // This executes the query 
  public void fetchUserResourcesofMASForUserId(String userId, String masRange, PrintWriter out)
  {
    int stRange = Integer.parseInt(masRange);
    int endRange = stRange + EnterpriseUtil.RANGE;
    // userID makes its way into the query and isnt sanitised
    String qry = "select distinct(RESOURCEID) from AM_USERRESOURCESTABLE where USERID=" + userId + " and RESOURCEID >" + stRange + " and RESOURCEID < " + endRange;
    AMLog.debug("[AMUserResourcesSyncServlet::(fetchUserResourcesofMASForUserId)] qry : " + qry);
    
    ResultSet rs = null;
    try
    {
      rs = AMConnectionPool.executeQueryStmt(qry); // executed here
      while (rs.next())
      {
        String resId = rs.getString(1);
        out.println(resId);
      }
    }
    catch (Exception ex)
    {
      ex.printStackTrace();
    }
    finally
    {
      AMConnectionPool.closeStatement(rs);
    }
  }
  

  public void fetchAllUserResourcesForMAS(String masRange, PrintWriter out)
  {
    int stRange = Integer.parseInt(masRange);
    int endRange = stRange + EnterpriseUtil.RANGE;
    String qry = "select * from AM_USERRESOURCESTABLE where RESOURCEID >" + stRange + " and RESOURCEID < " + endRange;
    AMLog.debug("[AMUserResourcesSyncServlet::(fetchAllUserResourcesForMAS)] qry : " + qry);
    
    ResultSet rs = null;
    try
    {
      rs = AMConnectionPool.executeQueryStmt(qry);
      while (rs.next())
      {
        String userId = rs.getString(1);
        String resId = rs.getString(2);
        out.println(userId + "," + resId);
      }
    }
    catch (Exception ex)
    {
      ex.printStackTrace();
    }
    finally
    {
      AMConnectionPool.closeStatement(rs);
    }
  }
  

  public void fetchAllConfigToUserMappingForMAS(PrintWriter out)
  {
    String qry = "select * from AM_CONFIGTOUSER_MAPPING where " + Constants.getCondition("CONFIGTYPE", DelegatedUserRoleUtil.getConfigTypesToSynch());
    AMLog.debug("[AMUserResourcesSyncServlet::(fetchAllConfigToUserMappingForMAS)] qry : " + qry);
    
    ResultSet rs = null;
    try
    {
      rs = AMConnectionPool.executeQueryStmt(qry);
      while (rs.next())
      {
        String relationID = rs.getString("RELATIONSHIPID");
        String configID = rs.getString("CONFIGID");
        String userID = rs.getString("USERID");
        String userGroupID = rs.getString("USERGROUPID");
        String configType = rs.getString("CONFIGTYPE");
        out.println(relationID + "," + configID + "," + userID + "," + userGroupID + "," + configType);
      }
    }
    catch (Exception ex)
    {
      ex.printStackTrace();
    }
    finally
    {
      AMConnectionPool.closeStatement(rs);
    }
  }
}
